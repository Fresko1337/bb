#!/usr/bin/env python
# Usage: bb whatdepends [-h] [-r] target [recipes [recipes ...]]
# Summary: Show what depends on the specified target
# Help: See bb whatdepends -h for detailed usage information.

import logging
import sys
import bbcmd


logger = logging.getLogger('bb.whatdepends')


def whatdepends(args):
    """Show what depends on the specified target"""

    # tinfoil sets up log output for the bitbake loggers, but bb uses
    # a separate namespace at this time
    bbcmd.setup_log_handler(logging.getLogger('bb'))

    tinfoil = bbcmd.Tinfoil(output=sys.stderr)
    tinfoil.prepare()

    recipes = list(args.recipes)
    recipes.append(args.target)
    tinfoil.prepare_taskdata(recipes)

    for recipe in recipes:
        recipe_id = tinfoil.get_buildid(recipe)
        if recipe_id is None:
            if recipe not in tinfoil.cooker.status.ignored_dependencies:
                # Not buildable or recipe doesn't exist, abort
                return 1

    targetid = tinfoil.get_buildid(args.target)
    if args.recursive:
        for dep_id, depth in tinfoil.rec_get_dependees(targetid):
            print('  '*depth + tinfoil.taskdata.build_names_index[dep_id])
    else:
        for dep_fnid, dep_id in tinfoil.get_dependees(targetid, seen=set()):
            print(tinfoil.taskdata.build_names_index[dep_id])


# provide bb completions
def main(arguments):
    parser = bbcmd.CompleteParser()
    parser.add_argument('-r', '--recursive', action='store_true',
            help='operate recursively, with indent reflecting depth')
    parser.add_argument('target')
    parser.add_argument('recipes', default=['universe'], nargs='*',
            help='recipes to check for dependencies on target (default: universe)')
    args = parser.parse_args(arguments)
    if args is None:
        # showing completions
        return
    else:
        return whatdepends(args)


if __name__ == '__main__':
    bbcmd.run_main(main)
