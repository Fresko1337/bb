#!/usr/bin/env python3
# Usage: bb whatdepends [-h] [-r] target [recipes [recipes ...]]
# Summary: Show what depends on the specified target
# Help: See bb whatdepends -h for detailed usage information.

import logging
import sys
import bbcmd


logger = logging.getLogger('bb.whatdepends')


def whatdepends(args):
    """Show what depends on the specified target"""

    # tinfoil sets up log output for the bitbake loggers, but bb uses
    # a separate namespace at this time
    bbcmd.setup_log_handler(logging.getLogger('bb'))

    tinfoil = bbcmd.Tinfoil(output=sys.stderr)
    tinfoil.prepare()

    recipes = list(args.recipes)
    recipes.append(args.target)
    with bbcmd.status('Preparing task data'):
        tinfoil.prepare_taskdata(recipes)

    ignored = tinfoil.cooker.recipecaches[''].ignored_dependencies | set(['universe', 'world'])
    for recipe in recipes:
        if (not tinfoil.taskdata.have_build_target(recipe) and
            recipe not in ignored):
            logger.error('No build target for %s' % recipe)
            return 1

    provmap = tinfoil.taskdata.get_providermap()
    filename = provmap.get(args.target)

    if args.recursive and args.run_time_only and args.filter_rdeps:
        # FIXME: gather my own info, as rdependees includes info from all task
        # dependencies, only the specified ones, or none, otherwise we pick up
        # rdeps from the sdk for an image recipe
        # FIXME: also pull pkgdata if it's available
        def pkg_rdependees(pkg, filename):
            """Return the packages which depend on the specified package, using the rdependee data for the specified filename."""
            rdependees = tinfoil.get_rdependees(filename)
            for rdep_fn in rdependees:
                if rdep_fn == filename:
                    continue
                for rdep_pkg, rdep_rdeps in tinfoil.cache_data.rundeps[rdep_fn].items():
                    if pkg in rdep_rdeps:
                        yield rdep_pkg, rdep_fn

        def rec_pkg_rdependees(pkg, filename, depth=0):
            yield pkg, depth
            for rdep_pkg, rdep_fn in pkg_rdependees(pkg, filename):
                for _pkg, _depth in rec_pkg_rdependees(rdep_pkg, rdep_fn, depth+1):
                    yield _pkg, _depth

        filename = tinfoil.taskdata.run_targets[args.target][0]
        for rdep, rdep_fn in pkg_rdependees(args.target, filename):
            for pkg, depth in rec_pkg_rdependees(rdep, rdep_fn):
                print('  '*depth + pkg)
    elif args.recursive:
        if args.run_time_only:
            func = tinfoil.rec_get_rdependees
        elif args.build_time_only:
            func = tinfoil.rec_get_dependees
        else:
            func = tinfoil.rec_get_all_dependees

        for dep_fn, depth, was_seen in func(filename):
            dep_target = tinfoil.cache_data.pkg_fn[dep_fn]
            print('  '*depth + dep_target + ('..' if was_seen else ''))
    else:
        if args.run_time_only:
            func = tinfoil.get_rdependees
        elif args.build_time_only:
            func = tinfoil.get_dependees
        else:
            func = tinfoil.get_all_dependees

        for dep_fn in func(filename):
            dep_target = tinfoil.cache_data.pkg_fn[dep_fn]
            print(dep_target)


# provide bb completions
def main(arguments):
    default_scope = os.getenv('BB_RECIPE_SCOPE') or 'universe'
    parser = bbcmd.CompleteParser()
    parser.add_argument('-r', '--recursive', action='store_true',
                        help='operate recursively, with indent reflecting depth')
    parser.add_argument('-f', '--filter-rdeps', action='store_true',
                        help='only traverse rdeps of rdeps, not all rdeps')
    namespace = parser.add_mutually_exclusive_group()
    namespace.add_argument('-B', '--build-time-only', action='store_true',
                           help='show build-time dependencies only')
    namespace.add_argument('-R', '--run-time-only', action='store_true',
                           help='show run-time dependencies only')
    parser.add_argument('target')
    parser.add_argument('recipes', default=[default_scope], nargs='*',
                        help='recipes to check for dependencies on target (default: universe)')
    args = parser.parse_args(arguments)
    if args is None:
        # showing completions
        return
    else:
        return whatdepends(args)


if __name__ == '__main__':
    bbcmd.run_main(main)
