#!/usr/bin/env python
# Usage: bb show [-h] [-d] [-f] [-r RECIPE] [variables [variables ...]]
# Summary: Show bitbake metadata (global or recipe)
# Help: See bb show -h for detailed usage information.

import logging
import os
import sys
import warnings
import bbcmd
import bb
import bb.cache
import bb.codeparser


logger = logging.getLogger('bb.show')


def get_data(tinfoil, recipe=None):
    if recipe:
        tinfoil.prepare_taskdata([recipe])
        targetid = tinfoil.get_buildid(recipe)
        if targetid is None:
            return

        fnid = tinfoil.taskdata.build_targets[targetid][0]
        fn = tinfoil.taskdata.fn_index[fnid]

        try:
            recipe_data = bb.cache.Cache.loadDataFull(fn, tinfoil.cooker.get_file_appends(fn),
                                                      tinfoil.config_data)
        except Exception:
            logger.exception("Unable to read %s", fn)
            raise
        return recipe_data
    else:
        return tinfoil.localdata


# TODO: enhance bb.data.emit* to function more flexibly, like these
def escape_shell_value(value):
    value = value.replace('"', r'\"')
    value = value.replace('`', r'\`')
    return value


def format_variable(data, variable, flag=None, shell=False):
    if flag:
        unexpanded = data.getVarFlag(variable, flag, False)
        pattern = '%s[%s]=%%s' % (variable, flag)
    else:
        unexpanded = data.getVar(variable, False)
        pattern = '%s=%%s' % variable

    if data.getVarFlag(variable, 'unexport'):
        if flag:
            return pattern % unexpanded
        else:
            return '# ' + pattern % unexpanded

    try:
        expanded = bb.data.expand(unexpanded, data)
    except BaseException:
        if flag:
            logger.exception("Expansion of '%s[%s]' failed", variable, flag)
        else:
            logger.exception("Expansion of '%s' failed", variable)
        return '# ' + pattern % unexpanded
    else:
        message = ''
        if unexpanded != expanded:
            message += '# ' + pattern % unexpanded + '\n'

        if data.getVarFlag(variable, 'export'):
            message += 'export '

        if isinstance(expanded, basestring):
            expanded = '"%s"' % escape_shell_value(expanded)
        else:
            expanded = repr(expanded)
        message += pattern % expanded
        return message


ignored_flags = ('func', 'python', 'export', 'export_func')
def print_variable_flags(data, variable):
    flags = data.getVarFlags(variable)
    if not flags:
        return

    for flag, value in flags.iteritems():
        if flag.startswith('_') or flag in ignored_flags:
            continue
        value = str(value)
        print(format_variable(data, variable, flag))


def print_variable(data, variable):
    unexpanded = data.getVar(variable, False)
    if unexpanded is None:
        return
    unexpanded = str(unexpanded)


    flags = data.getVarFlags(variable) or {}
    if flags.get('func'):
        if flags.get('python'):
            # TODO: fix bitbake to show methodpool functions sanely like this
            if variable in bb.methodpool._parsed_fns:
                print(unexpanded)
            else:
                print("python %s () {\n%s}\n" % (variable, unexpanded))
        else:
            try:
                value = bb.data.expand(unexpanded, data)
            except BaseException:
                logger.exception("Expansion of '%s' failed", variable)
                return

            print("%s () {\n%s}\n" % (variable, value))
    else:
        print(format_variable(data, variable, shell=True))


def variable_function_deps(data, variable, deps, seen):
    variable_deps = deps and deps.get(variable) or set()
    if data.getVarFlag(variable, 'python'):
        # TODO: Fix generate_dependencies to return python function
        # execs dependencies, which seem to be missing for some reason
        parser = bb.codeparser.PythonParser(variable, logger)
        parser.parse_python(data.getVar(variable, False))
        variable_deps |= parser.execs
        deps[variable] = variable_deps

    for dep in variable_deps:
        if dep in seen:
            continue
        seen.add(dep)

        if data.getVarFlag(dep, 'func'):
            for _dep in variable_function_deps(data, dep, deps, seen):
                yield _dep
            yield dep

def dep_ordered_variables(data, variables, deps):
    seen = set()
    for variable in variables:
        if variable in seen:
            continue

        seen.add(variable)
        for dep in variable_function_deps(data, variable, deps, seen):
            yield dep
        yield variable

def sorted_variables(data, variables=None, show_deps=True):
    def key(v):
        # Order: unexported vars, exported vars, shell funcs, python funcs
        if data.getVarFlag(v, 'func'):
            return int(bool(data.getVarFlag(v, 'python'))) + 2
        else:
            return int(bool(data.getVarFlag(v, 'export')))

    all_variables = data.keys()
    if not variables:
        variables = sorted(all_variables, key=lambda v: v.lower())
        variables = filter(lambda v: not v.startswith('_'), variables)
    else:
        for variable in variables:
            if variable not in all_variables:
                logger.warn("Requested variable '%s' does not exist", variable)
        variables = sorted(variables, key=lambda v: v.lower())
        if show_deps:
            deps = bb.data.generate_dependencies(data)[1]
            variables = list(dep_ordered_variables(data, variables, deps))

    variables = sorted(variables, key=key)
    return variables

def show(args):
    # tinfoil sets up log output for the bitbake loggers, but bb uses
    # a separate namespace at this time
    bbcmd.setup_log_handler(logging.getLogger('bb'))

    tinfoil = bbcmd.Tinfoil(output=sys.stderr)
    tinfoil.prepare(config_only=True)

    if args.recipe:
        tinfoil.parseRecipes()

    data = get_data(tinfoil, args.recipe)
    if not data:
        return 1

    variables = sorted_variables(data, args.variables, args.dependencies)
    for variable in variables:
        print_variable(data, variable)
        if args.flags:
            print_variable_flags(data, variable)


# provide bb completions
def main(arguments):
    parser = bbcmd.CompleteParser()
    parser.add_argument('-d', '--dependencies', action='store_true',
            help='also show functions the vars depend on')
    parser.add_argument('-f', '--flags', action='store_true', help='also show flags')
    parser.add_argument('-r', '--recipe', help='operate against this recipe')
    parser.add_argument('variables', nargs='*', help='variables to show (default: all variables)')

    args = parser.parse_args(arguments)
    if args is None:
        # showing completions
        return
    else:
        return show(args)


if __name__ == '__main__':
    bbcmd.run_main(main)
