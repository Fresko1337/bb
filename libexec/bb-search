#!/usr/bin/env python
# Usage: bb search [-h] [-i] [-S SCOPE] [-s | -e | -r | -w] pattern
# Summary: search for bitbake recipes/targets
# Help: See bb search -h for detailed usage information.

import fnmatch
import logging
import os
import re
import sys
import warnings
import bbcmd
import bb
import bb.cache
import bb.codeparser
from collections import defaultdict


logger = logging.getLogger('bb.search')


def target_filenames(tinfoil):
    for targetid in tinfoil.taskdata.build_targets:
        fnid = tinfoil.taskdata.build_targets[targetid][0]
        fn = tinfoil.taskdata.fn_index[fnid]
        yield fn

    for targetid in tinfoil.taskdata.run_targets:
        fnid = tinfoil.taskdata.run_targets[targetid][0]
        fn = tinfoil.taskdata.fn_index[fnid]
        yield fn

def scoped_search_for_recipe(tinfoil, pattern, searchfunc, scope='world'):
    for targetid in tinfoil.taskdata.build_targets:
        target = tinfoil.taskdata.build_names_index[targetid]
        if searchfunc(pattern, target):
            fnid = tinfoil.taskdata.build_targets[targetid][0]
            yield target, tinfoil.taskdata.fn_index[fnid]


def scoped_search_for_package(tinfoil, pattern, searchfunc, scope='world'):
    for rtargetid in tinfoil.taskdata.run_targets:
        rtarget = tinfoil.taskdata.run_names_index[rtargetid]
        if searchfunc(pattern, rtarget):
            fnid = tinfoil.taskdata.run_targets[rtargetid][0]
            yield rtarget, tinfoil.taskdata.fn_index[fnid]


def search(args):
    # tinfoil sets up log output for the bitbake loggers, but bb uses
    # a separate namespace at this time
    bbcmd.setup_log_handler(logging.getLogger('bb'))

    tinfoil = bbcmd.Tinfoil(output=sys.stderr)
    tinfoil.prepare()

    cache_data = tinfoil.cooker.status

    # Build the maps from fn to the runtime provide information
    fn_rprovides = defaultdict(set)
    for rprovide, fns in cache_data.rproviders.iteritems():
        for fn in fns:
            fn_rprovides[fn].add(rprovide)

    fn_packages = defaultdict(list)
    for package, fns in cache_data.packages.iteritems():
        for fn in fns:
            fn_packages[fn].append(package)

    fn_packages_dynamic = defaultdict(list)
    for dynamic, fns in cache_data.packages_dynamic.iteritems():
        for fn in fns:
            fn_packages_dynamic[fn].append(dynamic)


    if args.wildcard:
        args.regex = True
        args.pattern = fnmatch.translate(args.pattern)
    elif args.exact:
        if args.ignore_case:
            search = lambda pattern, string: pattern.upper() == string.upper()
        else:
            search = lambda pattern, string: pattern == string
    elif args.substring:
        if args.ignore_case:
            search = lambda pattern, string: pattern.upper() in string.upper()
        else:
            search = lambda pattern, string: pattern in string

    if args.regex:
        flags = 0
        if args.ignore_case:
            flags |= re.IGNORECASE
        args.pattern = re.compile(args.pattern, flags)
        search = lambda pattern, string: pattern.search(string)

    if args.scope:
        tinfoil.prepare_taskdata([args.scope])

        filenames = target_filenames(tinfoil)
    else:
        filenames = []
        all_filenames = cache_data.pkg_fn.keys()
        for provide, fns in cache_data.providers.iteritems():
            eligible, foundUnique = bb.providers.filterProviders(fns, provide, tinfoil.localdata,
                                                                 cache_data)
            filenames.append(eligible[0])

    for filename in sorted(bbcmd.iter_uniq(filenames)):
        matching_provides = []
        for provide in cache_data.fn_provides[filename]:
            if search(args.pattern, provide):
                matching_provides.append(provide)

        matching_runtime = []
        for package in fn_packages[filename]:
            if search(args.pattern, package):
                matching_runtime.append(package)

        for rprovide in fn_rprovides[filename]:
            if search(args.pattern, rprovide):
                matching_runtime.append(rprovide)

        for dynamic in fn_packages_dynamic[filename]:
            if search(args.pattern, dynamic):
                matching_runtime.append(dynamic)

        if matching_provides or matching_runtime:
            pn = cache_data.pkg_fn[filename]
            print('{}:'.format(pn))
            if matching_provides:
                print('  Matches in the build target namespace:')
                for provide in matching_provides:
                    print('    {}'.format(provide))
            if matching_runtime:
                print('  Matches in the runtime namespace:')
                for rtarget in matching_runtime:
                    print('    {}'.format(rtarget))


# provide bb completions
def main(arguments):
    parser = bbcmd.CompleteParser()
    parser.add_argument('-i', '--ignore-case', action='store_true',
                        help='perform a case insensistive search')
    parser.add_argument('-S', '--scope',
                        help='specify a target scope (rather than all recipes. ex. -S core-image-base)')
    parser.add_argument('pattern', help='pattern to search for')
    mode = parser.add_mutually_exclusive_group()
    mode.add_argument('-s', '--substring', action='store_true', default=True,
                      help='perform a substring search (default)')
    mode.add_argument('-e', '--exact', action='store_true',
                      help='look for an exact string match')
    mode.add_argument('-r', '--regex', action='store_true',
                      help='perform a regex search')
    mode.add_argument('-w', '--wildcard', action='store_true',
                      help='perform a glob/wildcard search')

    args = parser.parse_args(arguments)
    if args is None:
        # showing completions
        return
    else:
        return search(args)


if __name__ == '__main__':
    bbcmd.run_main(main)
