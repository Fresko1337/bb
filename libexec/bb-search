#!/usr/bin/env python
# Usage: bb search [-h] [-i] [-W] [-S SCOPE] [-a] [-s | -e | -r | -w] [-R | -P] pattern
# Summary: Search for bitbake recipes or packages
# Help: See bb search -h for detailed usage information.

import fnmatch
import logging
import os
import re
import sys
import warnings
import bbcmd
import bb
import bb.cache
import bb.codeparser
from collections import defaultdict


logger = logging.getLogger('bb.search')


def search(args):
    # tinfoil sets up log output for the bitbake loggers, but bb uses
    # a separate namespace at this time
    bbcmd.setup_log_handler(logging.getLogger('bb'))

    if args.wildcard:
        args.regex = True
        args.pattern = r'^' + fnmatch.translate(args.pattern)
    elif args.exact:
        if args.ignore_case:
            search = lambda pattern, string: pattern.upper() == string.upper()
        else:
            search = lambda pattern, string: pattern == string
    elif args.substring:
        if args.ignore_case:
            search = lambda pattern, string: pattern.upper() in string.upper()
        else:
            search = lambda pattern, string: pattern in string

    if args.regex:
        flags = 0
        if args.ignore_case:
            flags |= re.IGNORECASE
        if args.word:
            args.pattern = r'\b{0}\b'.format(args.pattern)
        args.pattern = re.compile(args.pattern, flags)
        search = lambda pattern, string: pattern.search(string)
    elif args.word:
        logger.error('--word is only supported with regex and wildcard searches')
        return 2

    tinfoil = bbcmd.Tinfoil(output=sys.stderr)
    tinfoil.prepare()

    cache_data = tinfoil.cooker.recipecache

    # Build the maps from fn to the runtime provide information
    fn_rprovides = defaultdict(set)
    for rprovide, fns in cache_data.rproviders.iteritems():
        for fn in fns:
            fn_rprovides[fn].add(rprovide)

    fn_packages = defaultdict(list)
    for package, fns in cache_data.packages.iteritems():
        for fn in fns:
            fn_packages[fn].append(package)

    fn_packages_dynamic = defaultdict(list)
    for dynamic, fns in cache_data.packages_dynamic.iteritems():
        for fn in fns:
            fn_packages_dynamic[fn].append(dynamic)

    with bbcmd.status('Gathering preferred recipe filenames'):
        if args.scope:
            tinfoil.prepare_taskdata([args.scope])

            filenames = tinfoil.target_filenames()
        else:
            filenames = tinfoil.all_preferred_filenames()

    for filename in filenames:
        pn = cache_data.pkg_fn[filename]
        matched_pn = False
        if not args.packages:
            matched_pn = search(args.pattern, cache_data.pkg_fn[filename])
            if matched_pn:
                print(pn)
                if not args.all:
                    continue

            matching_provides = []
            for provide in cache_data.fn_provides[filename]:
                if search(args.pattern, provide):
                    matching_provides.append(provide)
            if matching_provides:
                if not matched_pn:
                    print(pn + ':')
                if matching_provides:
                    print('  Provides:')
                    for provide in matching_provides:
                        print('    ' + provide)
                    if not args.all:
                        continue

        if not args.recipes:
            matching_runtime = []
            for package in fn_packages[filename]:
                if search(args.pattern, package):
                    matching_runtime.append(package)
            if not matching_runtime or args.all:
                for rprovide in fn_rprovides[filename]:
                    if search(args.pattern, rprovide):
                        matching_runtime.append(rprovide)
                if not matching_runtime or args.all:
                    for dynamic in fn_packages_dynamic[filename]:
                        if search(args.pattern, dynamic):
                            matching_runtime.append(dynamic)

            if matching_runtime:
                if not matched_pn:
                    print(pn + ':')
                print('  Packages:')
                for runtime in bbcmd.iter_uniq(matching_runtime):
                    print('    ' + runtime)


# provide bb completions
def main(arguments):
    parser = bbcmd.CompleteParser()
    parser.add_argument('-i', '--ignore-case', action='store_true',
                        help='perform a case insensistive search')
    parser.add_argument('-W', '--word', action='store_true',
                        help='search for a particular word (only supported by the regex and wildcard searches)')
    parser.add_argument('-S', '--scope',
                        help='specify a target scope (rather than all recipes. ex. -S core-image-base)')
    parser.add_argument('-a', '--all', action='store_true',
                        help='display all matches, even if we have already matched a given recipe')
    mode = parser.add_mutually_exclusive_group()
    mode.add_argument('-s', '--substring', action='store_true', default=True,
                      help='perform a substring search (default)')
    mode.add_argument('-e', '--exact', action='store_true',
                      help='look for an exact string match')
    mode.add_argument('-r', '--regex', action='store_true',
                      help='perform a regex search')
    mode.add_argument('-w', '--wildcard', action='store_true',
                      help='perform a glob/wildcard search')
    namespace = parser.add_mutually_exclusive_group()
    namespace.add_argument('-R', '--recipes', action='store_true',
                           help='search the recipe namespace only')
    namespace.add_argument('-P', '--packages', action='store_true',
                           help='search the package namespace only')

    parser.add_argument('pattern', help='pattern to search for')

    args = parser.parse_args(arguments)
    if args is None:
        # showing completions
        return
    else:
        return search(args)


if __name__ == '__main__':
    bbcmd.run_main(main)
